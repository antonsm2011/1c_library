&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьГруппировкуКниг = Константы.ИспользоватьГруппировкуКниг.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ИспользоватьГруппировкуКниг Тогда
		Элементы.СписокКнигДляОтбора.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.СписокКнигДляОтбора.Отображение = ОтображениеТаблицы.Список;
		// Скроем группы
		Отбор = СписокКнигДляОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = Ложь;
		Отбор.Использование = Истина;
		СкрытьЭлемент("СписокКонтекстноеМенюСоздатьГруппу");
		СкрытьЭлемент("СписокКонтекстноеМенюПеренестиЭлемент");
		СкрытьЭлемент("СписокКонтекстноеМенюУровеньВверх");
		СкрытьЭлемент("СписокКонтекстноеМенюУровеньВниз");
		СкрытьЭлемент("ФормаСоздатьГруппу");
		СкрытьЭлемент("ФормаРежимПросмотра");
		СкрытьЭлемент("ФормаИерархическийСписок");	
		СкрытьЭлемент("ФормаСписок");
		СкрытьЭлемент("ФормаДерево");
		СкрытьЭлемент("ФормаПеренестиЭлемент");
		СкрытьЭлемент("ФормаУровеньВверх");
		СкрытьЭлемент("ФормаУровеньВниз");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкрытьЭлемент(ИмяЭлемента)

	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

// Проработаем перетаскивание книги из отбора в таблицу для заказа
&НаКлиенте
Процедура КнигиКЗаказуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Если книга уже есть но не добавляем
	СтруктураОтбора = Новый Структура("Книга", ПараметрыПеретаскивания.Значение[0]);
	Если Объект.КнигиКЗаказу.НайтиСтроки(СтруктураОтбора).Количество() = 0 тогда
		СтрокаКнигиКЗаказу = Объект.КнигиКЗаказу.Добавить();	
		СтрокаКнигиКЗаказу.Книга = ПараметрыПеретаскивания.Значение[0];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СделатьЗаказ(Команда)
	Если Объект.КнигиКЗаказу.Количество() = 0 Тогда
		Сообщить("Список книг к заказу пуст.");
		Возврат;
	КонецЕсли;
	Результат = СоздатьБП();
	// Сообщить пользователю если БП сформирован
	Если Результат Тогда
		Вопрос("Ваша заявка сформирована!", РежимДиалогаВопрос.ОК, 3,);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьБП()
	Результат = Истина;
	БП = БизнесПроцессы.ЗаказКниги.СоздатьБизнесПроцесс();
	БП.КнигиКЗаказу.Загрузить(Объект.КнигиКЗаказу.Выгрузить());
	БП.Дата = ТекущаяДата(); 
	Попытка
		БП.Записать();
		БП.Старт();	
	Исключение
	    Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

// Функция переносит выделенные книги в таблицу книг к заказу
&НаКлиенте
Процедура ВыбратьКнигу(Команда)
	
	ВыделенныеСтроки = ЭтаФорма.Элементы.СписокКнигДляОтбора.ВыделенныеСтроки;
	
	ВыбранныеКниги = Новый Массив();
	ВыбранныеГруппыКниг = Новый Массив();
	
	// Среди выделенных разделяем книги и группы
	Для Каждого Элемент из ВыделенныеСтроки Цикл
		// Если есть необпределено, то это корень - надо добавить все
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			ВыбранныеГруппыКниг.Добавить(ПредопределенноеЗначение("Справочник.Книги.ПустаяСсылка"));
			Продолжить;
		КонецЕсли;		
		Если Элемент.ЭтоГруппа Тогда			
			ВыбранныеГруппыКниг.Добавить(Элемент);			
		Иначе
			ВыбранныеКниги.Добавить(Элемент);
		КонецЕсли;		
	КонецЦикла;
	
	// Группы раскрываем и добавляем книги входящие в группу
	ВыбранныеКнигиИзГрупп = КнигиВВыбранныхГруппах(ВыбранныеГруппыКниг);
	Для Каждого Книга Из ВыбранныеКнигиИзГрупп Цикл
		ВыбранныеКниги.Добавить(Книга);
	КонецЦикла;
	
	Для Каждого Книга из ВыбранныеКниги Цикл 		
		// Если книга уже есть но не добавляем
		СтруктураОтбора = Новый Структура("Книга", Книга);
		Если Объект.КнигиКЗаказу.НайтиСтроки(СтруктураОтбора).Количество() = 0 тогда			
			СтрокаКнигиКЗаказу = Объект.КнигиКЗаказу.Добавить();			
			СтрокаКнигиКЗаказу.Книга = Книга;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Возвращает список книг входящих в выбранные группы.
// 
// Параметры:
// 	ВыбранныеГруппыКниг - Массив(СправочникСсылка.Книги) - Группы книг в которых надо искть книги. Передаем массив чтобы минимизировать количество серверных вызовов
// Возвращаемое значение:
// 	Массив - СправочникСсылка.Книги - книги, входящие в группу и подгруппы
//
&НаСервереБезКонтекста	
Функция КнигиВВыбранныхГруппах(ВыбранныеГруппыКниг)
	
	ВыбранныеКнигиИзГрупп = Новый Массив();
	
	Для Каждого ГруппаКниг Из ВыбранныеГруппыКниг Цикл
		КнигиВГруппе = Справочники.Книги.КнигиВГруппе(ГруппаКниг);
		Для Каждого Книга Из КнигиВГруппе Цикл
			ВыбранныеКнигиИзГрупп.Добавить(Книга);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВыбранныеКнигиИзГрупп; 
	
КонецФункции

