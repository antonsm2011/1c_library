#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда // Для работы толстого клиента https://its.1c.ru/db/v8std#content:680:hdoc

// Определим реквизиты создаваемых задач
Процедура ВыдачаКнигиПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	//определяем исполнителя
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ЗаказКниги.ТочкиМаршрута.ВыдачаКниги Тогда
		//проверим значение в константе, так как устаналвиаем исполнителя из нее
		Если НЕ ЗначениеЗаполнено(Константы.ОтветственныйЗаВыдачуКниг.Получить()) Тогда
			Сообщить("Не установлена константа ""ОтветственныйЗаВыдачуКниг"". Задача не может быть сформирована.");
			Отказ = Истина;
		КонецЕслИ;
		//Заполним значения исполнителя для всех задач, но тут должна быть одна задача
		Для каждого Задача из ФормируемыеЗадачи цикл			
			Задача.Исполнитель = Константы.ОтветственныйЗаВыдачуКниг.Получить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Перед записью БП надо определить атвора, то бы знать кому нужны книги
Процедура ПередЗаписью(Отказ)
	Если ПараметрыСеанса.ТекущийПользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
		Сообщить("Текущий пользователь не зарегистрирован. Нельзя записать БП без указания пользователя.");
		Отказ = Истина;
	КонецЕсли;
	//проверим заполнена ли константа ответственного за выдачу книг
	Если НЕ ЗначениеЗаполнено(Константы.ОтветственныйЗаВыдачуКниг.Получить()) Тогда
		Сообщить("Не установлена константа ""ОтветственныйЗаВыдачуКниг"". Задача не может быть сформирована.");
		Отказ = Истина;
	КонецЕслИ;
	//Проверим есть ли у пользователя привязка к абоненту
	Если НЕ ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.Абонент) Тогда
		Сообщить("Текущий пользователь не привязан к абоненту. Задача не может быть сформирована.");
		Отказ = Истина;
	КонецЕсли;
	ЭтотОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	//определим есть ли такие книги в библиотеке
	МассивСсылокКниг = новый Массив;
	//создадим массив книг из заказа
	Для каждого Строка из ЭтотОбъект.КнигиКЗаказу Цикл
		МассивСсылокКниг.Добавить(Строка.Книга);
	КонецЦикла;	
	//вызовем функцию которая возвращает те книги которые надо удалить
	МассивСсылокКниг = ОбщегоНазначенияСервер.ПроверитьОстаткиВБибиотеке(Истина, ЭтотОбъект.Дата, МассивСсылокКниг);
	//если они есть
	Если МассивСсылокКниг.Количество() > 0 Тогда
		Сообщение = "Данных книг нет в библиотеке они удалены из заказа:" + Символы.ПС;
		//то формируем сообщение
		Для каждого Книга из МассивСсылокКниг Цикл
			Сообщение = Сообщение + Книга +  Символы.ПС; 
			//и удаляем
			ЭтотОбъект.КнигиКЗаказу.Удалить(ЭтотОбъект.КнигиКЗаказу.Найти(Книга, "Книга"));
		КонецЦикла;
		Сообщить(Сообщение);
	КонецЕсли;
	//если таб часть пуста то отменяем заказ книги	
	Если ЭтотОбъект.КнигиКЗаказу.Количество() = 0 Тогда
		Сообщить("В табличной части нет Книг. Заказ не сформирован");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Заполним реквизиты задачи возврата книг
Процедура ВозвратКнигиПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ЗаказКниги.ТочкиМаршрута.ВозвратКниги Тогда
		//Заполним значения исполнителя для всех задач, но тут должна быть одна задача
		Для каждого Задача из ФормируемыеЗадачи Цикл
			Задача.Исполнитель = ЭтотОбъект.Автор;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
