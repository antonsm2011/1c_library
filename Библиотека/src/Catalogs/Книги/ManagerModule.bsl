#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда // Для работы толстого клиента https://its.1c.ru/db/v8std#content:680:hdoc

Функция СоздатьКнигу(Наименование, ПолноеНаименование, Описание, Авторы, Издательство, Страниц, ГодИздания, ИнвентарныйНомер, ISBN, ББК, Штрихкод, ФайлОбложки) Экспорт
	
	НоваяКнига = Справочники.Книги.СоздатьЭлемент();
	
	НоваяКнига.Наименование = Наименование;
	НоваяКнига.ПолноеНаименование = ПолноеНаименование;
	НоваяКнига.Страниц = Страниц;
	НоваяКнига.ГодИздания = ГодИздания;
	НоваяКнига.ИнвентарныйНомер = ИнвентарныйНомер;
	Для Каждого Автор Из Авторы Цикл
		НоваяСтрока = НоваяКнига.Авторы.Добавить();
		НоваяСтрока.Автор = Автор;
	КонецЦикла;
	НоваяКнига.Издательство = Издательство;
	НоваяКнига.Описание = Описание;
	НоваяКнига.ISBN = ISBN;
	НоваяКнига.ББК = ББК;
	НоваяКнига.Штрихкод = Штрихкод;
	НоваяКнига.Обложка = ФайлОбложки;
	Попытка
		НоваяКнига.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("ru = 'Не удалось создать книгу'");
		СообщениеПользователю.Сообщить();
		ОбщегоНазначенияСервер.ЗафиксироватьОшибку(СообщениеПользователю.Текст, ОписаниеОшибки, Метаданные.Справочники.Книги, Наименование);
	КонецПопытки;
	
	Возврат НоваяКнига.Ссылка;
	
КонецФункции

Процедура ПечатьФормуляра(ТабДок, Ссылка) Экспорт
	
	Макет = Справочники.Книги.ПолучитьМакет("Формуляр");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигиАвторы.Автор,
	|	КнигиАвторы.Ссылка.Наименование,
	|	КнигиАвторы.Ссылка.Страниц,
	|	КнигиАвторы.Ссылка.Издательство,
	|	КнигиАвторы.Ссылка.ИнвентарныйНомер
	|ИЗ
	|	Справочник.Книги.Авторы КАК КнигиАвторы
	|ГДЕ
	|	КнигиАвторы.Ссылка = &Ссылка";
	Запрос.Параметры.Вставить("Ссылка", Ссылка[0].Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Формуляр = Макет.ПолучитьОбласть("Формуляр");
	ТабДок.Очистить();
	Наименование = "";	
	Пока Выборка.Следующий() Цикл
		Наименование = Наименование + Выборка.Автор+ ",";
	КонецЦикла;
	формуляр.Параметры.ИнвентарныйНомер = "№ " + СокрЛП(Ссылка[0].ИнвентарныйНомер);
	Формуляр.Параметры.Наименование =  Ссылка[0].Наименование + " " + Ссылка[0].Издательство + " " + Наименование + "стр." + Ссылка[0].Страниц;
	ТабДок.Вывести(Формуляр);
	
КонецПроцедуры

// Возвращает текущее расположение книги
//
// Параметры
//  <Книга> 	- <СправочникСсылка.Книги>  	- ссылка на книгу расположение которой надо получить
//
//  <Дата> 		- <Дата>  						- момент времени на который надо получить расположение, если не задано то ТекущаяДата()
//
// Возвращаемое значение:
//   <СправочникСсылка.Абоненты; СправочникСсылка.МестаРазмещения>   - текущее расположение книги или Неопределено если в регистре нет записи
//
Функция ПолучитьРасположениеКниги(Книга, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигиВБиблиотекеОстатки.МестоРазмещения
	|ИЗ
	|	РегистрНакопления.КнигиВБиблиотеке.Остатки(&Дата, Книга = &Книга) КАК КнигиВБиблиотекеОстатки
	|ГДЕ
	|	КнигиВБиблиотекеОстатки.КоличествоОстаток = 1";
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Книга", Книга);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.МестоРазмещения;
	КонецЦикла;
	
	Возврат Неопределено;
	
	
КонецФункции // ПолучитьРасположениеКниги()

// Массив книг в ходящих в группу
// 
// Параметры:
// 	ГруппаКниг - СправочникСсылка.Книги - Группа книг в которой производится поиск книг
// Возвращаемое значение:
// 	Массив - СправочникСсылка.Книги - книги, входящие в группу и подгруппы
// 	
Функция КнигиВГруппе(ГруппаКниг) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Книги.Ссылка КАК Книга
		|ИЗ
		|	Справочник.Книги КАК Книги
		|ГДЕ
		|	Книги.Родитель В ИЕРАРХИИ (&ГруппаКниг)
		|	И
		|	НЕ Книги.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ГруппаКниг", ГруппаКниг);
	
	Книги = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Книга");
	
	Возврат Книги;
	
КонецФункции

#КонецЕсли
