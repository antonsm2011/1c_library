#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда // Для работы толстого клиента https://its.1c.ru/db/v8std#content:680:hdoc

Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор, СсылкаНаТекущего = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
		|	И Пользователи.Ссылка <> &СсылкаНаТекущего";
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция УдалитьПользователяИБ(Знач Идентификатор, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) Тогда
		Возврат Ложь;
	Иначе
		Попытка
			ПользовательИБ.Удалить();
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка при удалении пользователя информационной базы:'") + Символы.ПС + ИнформацияОбОшибке().Причина.Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция ПрочитатьПользователяИБ считывает свойства пользователя
// информационной базы по строковому или уникальному идентификатору.
//
// Параметры:
//  Идентификатор - Неопределено, Строка, УникальныйИдентификатор (идентификатор пользователя).
//  Свойства     - Структура:
//                 ПользовательИнфБазыУникальныйИдентификатор   - УникальныйИдентификатор
//                 ПользовательИнфБазыИмя                       - Строка
//                 ПользовательИнфБазыПолноеИмя                 - Строка
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Булево
//                 ПользовательИнфБазыПароль                    - Неопределено
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Строка
//                 ПользовательИнфБазыПарольУстановлен          - Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Булево
//                 ПользовательИнфБазыПользовательОС            - Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Строка (имя языка из коллекции Метаданные.Языки)
//
//  Роли           - Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//  
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ПрочитатьПользователяИБ(Знач Идентификатор, Свойства = Неопределено, Роли = Неопределено, ОписаниеОшибки = "", ПользовательИБ = Неопределено) Экспорт
	
	// Подготовка структур возвращаемых данных
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   Новый УникальныйИдентификатор);
	Свойства.Вставить("ПользовательИнфБазыИмя",                       "");
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 "");
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    Неопределено);
	Свойства.Вставить("ПользовательИнфБазыСохраняемоеЗначениеПароля", "");
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            "");
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         ?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              "Авто");
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      ?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		//ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователь информационной базы ""%1""' не найден!"), Идентификатор);
		ОписаниеОшибки = НСтр("ru = 'Пользователь информационной базы ""%1""' не найден!");
		Возврат Ложь;
	КонецЕсли;
	
	Свойства.ПользовательИнфБазыУникальныйИдентификатор     = ПользовательИБ.УникальныйИдентификатор;
	Свойства.ПользовательИнфБазыИмя                         = ПользовательИБ.Имя;
	Свойства.ПользовательИнфБазыПолноеИмя                   = ПользовательИБ.ПолноеИмя;
	Свойства.ПользовательИнфБазыАутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
	Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора     = ПользовательИБ.ПоказыватьВСпискеВыбора;
	Свойства.ПользовательИнфБазыСохраняемоеЗначениеПароля   = ПользовательИБ.СохраняемоеЗначениеПароля;
	Свойства.ПользовательИнфБазыПарольУстановлен            = ПользовательИБ.ПарольУстановлен;
	Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль     = ПользовательИБ.ЗапрещеноИзменятьПароль;
	Свойства.ПользовательИнфБазыАутентификацияОС            = ПользовательИБ.АутентификацияОС;
	Свойства.ПользовательИнфБазыПользовательОС              = ПользовательИБ.ПользовательОС;
	Свойства.ПользовательИнфБазыОсновнойИнтерфейс           = ?(ПользовательИБ.ОсновнойИнтерфейс = Неопределено, "", ПользовательИБ.ОсновнойИнтерфейс.Имя);
	Свойства.ПользовательИнфБазыРежимЗапуска                = ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение,
	                                                            "ОбычноеПриложение",
	                                                            ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение,
	                                                              "УправляемоеПриложение",
	                                                              "Авто"));
	Свойства.ПользовательИнфБазыЯзык                        = ?(ПользовательИБ.Язык = Неопределено, "", ПользовательИБ.Язык.Имя);
	
	Для каждого Роль Из ПользовательИБ.Роли Цикл
		Роли.Добавить(Роль.Имя);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	Если ИдентификаторПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") И
	     ПользовательПоИдентификаторуСуществует(ИдентификаторПользователяИБ, Ссылка) Тогда
	
		ВызватьИсключение(НСтр("ru = 'Один пользователь информационной базы
		                             |может быть связан только с одним пользователем или внешним пользователем!'"));
	КонецЕсли;
	
	//Если ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
		
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ПользовательИБСуществует(ИдентификаторПользователяИБ) Тогда
		ОписаниеОшибки = "";
		Если НЕ УдалитьПользователяИБ(ИдентификаторПользователяИБ, ОписаниеОшибки) Тогда
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли